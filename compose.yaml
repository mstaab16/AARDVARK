# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  server:
    build:
      context: .
      dockerfile: server.Dockerfile
    working_dir: /app
    command: uvicorn main:app --host 0.0.0.0 --port=80 --reload 
    volumes:
      - ./app:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    ports:
      - 80:80
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  db:
    image: postgres:16.1-alpine
    restart: always
    user: ${POSTGRES_USER}
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Deploy the worker
  celery_worker:
    container_name: celery_worker
    build:
      context: .
      dockerfile: worker.Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: celery -A celery_workers.tasks worker --loglevel=info #  --pool=solo
    volumes:
      - ./app:/app
    depends_on:
      - redis
      - server
    

volumes:
  db-data:
